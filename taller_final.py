# -*- coding: utf-8 -*-
"""Taller final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o7R3WqhpSJH2nPtsWUfPtL_Y-GtrzcpZ
"""

from datetime import date

confirmarNombre = False
confirmarCorreo = False
confirmarCelular = False
confirmarCantCadenas = False

class Correo:
    def print_information(self, Subject, To, From, Password, Message):
        print("Subject: ", Subject)
        print("To: ", To)
        print("From: ", From)
        print("Password: ", Password)
        print("Message: ", Message)

enviarCorreo = Correo()

nombreCientifico = input("Digite el nombre del cientifíco: ")

while confirmarNombre == False:
    if not nombreCientifico.isalpha() or len(nombreCientifico) > 50:
        nombreCientifico = input("Por favor ingrese un nombre válido: ")
    else: 
        confirmarNombre = True 

fechaAnalisis = date.today()
correoCientifico = input("Digite el correo del cientifíco: ")

while confirmarCorreo == False:
    if not "@" in correoCientifico:
        correoCientifico = input("Por favor ingrese un correo válido: ")
    else:
        confirmarCorreo = True 

celularCientifico = input("Digite el celular del cientifíco: ")

while confirmarCelular == False:
    if celularCientifico[0] != "3" or len(celularCientifico) != 10:
        celularCientifico = input("Por favor ingrese un número válido: ")
    else:
        confirmarCelular = True

cantidadCadenas = int(input("Digite la cantidad de cadenas a analizar: "))

while confirmarCantCadenas == False:
    if cantidadCadenas < 10 or cantidadCadenas > 100:
        print("Por favor digite una cantidad entre 10 y 100")
        reintentar = input("¿Desea reintentar o salir? 1. Reintentar 2. Salir: ")
        if reintentar == "1":
            cantidadCadenas = int(input("Digite la cantidad de cadenas a analizar: "))
        else:
            enviarCorreo.Subject = 'Error de análisis'
            enviarCorreo.To = correoCientifico
            enviarCorreo.From = 'mjtorress@eafit.edu.co'
            enviarCorreo.Password = '123'
            enviarCorreo.Message = 'No se ha podido realizar con éxito el análisis, los datos ingresados no son los esperados. Recuerda que la cantidad mínima para realizar un análisis es de 10 cadenas y máxima de 100. Realiza el intento nuevamente, siguiendo las instrucciones como se indican en este correo' 
            enviarCorreo.print_information(enviarCorreo.Subject,enviarCorreo.To,enviarCorreo.From,enviarCorreo.Password,enviarCorreo.Message)
            exit()
    else:
        confirmarCantCadenas = True        

lista_cadenas = []
lista_incorrectas = []
informacion_cadena = []
transcripciones = []
valores_recurrentes = []
count = 1

def validar_cadena(lista):
    for elemento in lista:
        revisar = "".join(elemento)
        if len(revisar) < 20:
            lista_incorrectas.append(elemento)
            lista_cadenas.remove(elemento)
        for j in revisar:
            if j != "A" and j != "C" and j != "G" and j!= "T" and j != "U" in revisar:
                if revisar.count("T") > 0 and revisar.count("U") > 0:
                    lista_incorrectas.append(elemento)
                    lista_cadenas.remove(elemento)
                else:
                    lista_incorrectas.append(elemento)
                    lista_cadenas.remove(elemento)

for i in range(1,cantidadCadenas + 1):
    subcadena = []
    cadena = input(f"Digite la cadena {i} a analizar: ").upper()
    subcadena.append(cadena)
    lista_cadenas.append(subcadena)

    validar_cadena(lista_cadenas)


for k in lista_cadenas:
    revisar = "".join(k)
    diccionario_cadenas = {
        "Cadena": count,
        "Tamano": len(revisar),
        "Tipo": "ARN" if "U" in revisar else "ADN",
        "A": revisar.count("A"),
        "G": revisar.count("G"),
        "C": revisar.count("C"),
        "T": revisar.count("T"),
        "U": revisar.count("U") 
    }
    informacion_cadena.append(diccionario_cadenas)
    if diccionario_cadenas["Tipo"] == "ADN":
        transcripcion = {
            "Cadena": diccionario_cadenas["Cadena"],
            "Tipo": diccionario_cadenas["Tipo"],
            "Transcripcion": "ARN",
            "Cadena_original": revisar,
            "Cadena_transcripcion": revisar.replace("T","U")
        }
    else:
        transcripcion = {
            "Cadena": diccionario_cadenas["Cadena"],
            "Tipo": diccionario_cadenas["Tipo"],
            "Transcripcion": "ADN",
            "Cadena_original": revisar,
            "Cadena_transcripcion": revisar.replace("U","T")
        }
    transcripciones.append(transcripcion)

    valores = {
        "Cadena": transcripcion["Cadena"],
        "Tipo": transcripcion["Tipo"],
        "Transcripcion": transcripcion["Transcripcion"],
        "Recurrente_T": revisar.count("T"),
        "Recurrente_G": revisar.count("G")
    }

    valores_recurrentes.append(valores)
    count += 1

enviarCorreo.Subject = 'Fin de análisis'
enviarCorreo.To = correoCientifico
enviarCorreo.From = 'mjtorress@eafit.edu.co'
enviarCorreo.Password = '123'
enviarCorreo.Message = f'Transcripción de cadenas de ADN a ARN - identificación de valores recurrentes. Información Cadena: {informacion_cadena}, transcripción: {transcripciones}, Valores recurrentes: {valores_recurrentes}, Este analisis fuera realizado por: {nombreCientifico} Teléfono de contacto: {celularCientifico}'

enviarCorreo.print_information(enviarCorreo.Subject,enviarCorreo.To,enviarCorreo.From,enviarCorreo.Password,enviarCorreo.Message)